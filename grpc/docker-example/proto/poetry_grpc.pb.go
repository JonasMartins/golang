// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/poetry.proto

package poetry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtobufServiceClient is the client API for ProtobufService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtobufServiceClient interface {
	RandomPoetries(ctx context.Context, in *RandomPoetriesRequest, opts ...grpc.CallOption) (*PoetryList, error)
}

type protobufServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtobufServiceClient(cc grpc.ClientConnInterface) ProtobufServiceClient {
	return &protobufServiceClient{cc}
}

func (c *protobufServiceClient) RandomPoetries(ctx context.Context, in *RandomPoetriesRequest, opts ...grpc.CallOption) (*PoetryList, error) {
	out := new(PoetryList)
	err := c.cc.Invoke(ctx, "/proto.ProtobufService/RandomPoetries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtobufServiceServer is the server API for ProtobufService service.
// All implementations should embed UnimplementedProtobufServiceServer
// for forward compatibility
type ProtobufServiceServer interface {
	RandomPoetries(context.Context, *RandomPoetriesRequest) (*PoetryList, error)
}

// UnimplementedProtobufServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProtobufServiceServer struct {
}

func (UnimplementedProtobufServiceServer) RandomPoetries(context.Context, *RandomPoetriesRequest) (*PoetryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomPoetries not implemented")
}

// UnsafeProtobufServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtobufServiceServer will
// result in compilation errors.
type UnsafeProtobufServiceServer interface {
	mustEmbedUnimplementedProtobufServiceServer()
}

func RegisterProtobufServiceServer(s grpc.ServiceRegistrar, srv ProtobufServiceServer) {
	s.RegisterService(&ProtobufService_ServiceDesc, srv)
}

func _ProtobufService_RandomPoetries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomPoetriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtobufServiceServer).RandomPoetries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProtobufService/RandomPoetries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtobufServiceServer).RandomPoetries(ctx, req.(*RandomPoetriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtobufService_ServiceDesc is the grpc.ServiceDesc for ProtobufService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtobufService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProtobufService",
	HandlerType: (*ProtobufServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RandomPoetries",
			Handler:    _ProtobufService_RandomPoetries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/poetry.proto",
}
